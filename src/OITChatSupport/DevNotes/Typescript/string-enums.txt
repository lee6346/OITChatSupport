String enums:  http://angularfirst.com/typescript-string-enums/
	use string values instead of int values to represent the enum type

	Look-back at regular enums in TS
		enum size{
			small,
			med,
			large,
			xlarge
		}
	This is under the hood represented by
		var size;
		(function (size){
			size[size['small']=0]='small';
			size[size['med']=1]='med';
			size[size['large']=2]='large';
			size[size['xlarge']=3]='xlarge';
		})(size || (size = {}));

		size.xlarge ==> 0
		size[size.xlarge] ==> 'small'

	then you do the following:
		interface Shirt {
			size: string;
		}
		const shirt: Shirt = {
			size: size[size.large]
		};
		const fatShirt: Shirt = {
			size: size[size.xlarge]
		};

	TS allos a way to limit the string values into its own type definition
		type SizeString = 'xlarge' | 'large' | 'med' | 'small';
		const small: SizeString  = 'large';
		const invalidSize: SizeString = ''; //will cause compiler error since '' is not one of the 4 string types

	Use case: suppose user selections (drop downs, forms, radio buttoms, etc) where you 
		can use enums to represent the selection, but have string values more user friendly than numeric values

	Example 
	(size.type.ts)
		const Size = {
			xlarge: 'xl' as 'xl',
			large: 'l' as 'l',
			med: 'm' as 'm',
			small: 's' as 's'
		};
		type Size = (typeof Size)[keyof typeof Size];
		export { Size };
	(size-select.component.ts)
		@Component({
			selector: 'size-select',
			template: `
				<select [ngModel]="selectedSize">
					<option value="{{size.xlarge}}">Extra Large</option>
					<option value="{{size.large}}">Large</option>
					<option value="{{size.med}}">Medium</option>
					<option value="{{size.small}}">Small</option>
				</select> `
		})
		export class SizeSelectComponent{
			@Input()
			selectedSize: Size;

			size = Size;
		}

	(app-component.ts): will conside the Size const and input into the size-select selector template
		@Component({
			selector: 'app',
			template: `<size-select [selectSize]='size'></size-select>`
		})
		export class AppComponent{
			size: Size;
			ngOnInit(){
				this.size = Size.Small;
			}
		}


